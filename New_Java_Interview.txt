# Singleton Class

public class Singleton
{
private Singleton
{}
private static Singleton instance=null;
public static Singleton getInstance()
{
	if(instance==null)
	{
		syncronized(Singleton.class)
		{
		if(instance==null)
		{
		 instance = new Singleton();
		}
		}
	}
	return instance;
}
}
e.g: Printer & Employee, dataBase, Multithreading.
Note: Construction is private in Singleton so that it cant be accessed .
Link: https://www.geeksforgeeks.org/singleton-design-pattern/
...............
fail safe-> When their is no ConcurrentModification exceptions occur inside the iteration then it is fail Safe, it happens bcz the modification is done at the copy part, 
fail fast: CopyOnWriteArrayList<> https://www.javatpoint.com/fail-fast-and-fail-safe-iterator-in-java#:~:text=The%20Fail%20fast%20iterator%20aborts,failures%20as%20much%20as%20possible.
............... Object Level Lock Vs Class Level Lock (sycronized(this),sycronized(Class_Name.class))
Link:https://www.tutorialspoint.com/difference-between-object-level-lock-and-class-level-lock-in-java
**Note: Class Level Lock: It is use when the user need to handle the Static method or Static Block of code, it is necessary to make class as a thread safe, bcz static can be accessed through the reference of class.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# DI Example # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Without Dependency Inversion Principle:
In this scenario, we'll start by designing the notification system without adhering to the Dependency Inversion Principle.
The parent class is dependent on its child class, which provide a tight coupling. We can remove the dependency by using the DIP.Link1: https://ide.geeksforgeeks.org/online-java-compiler/c956ece1-58cd-4dd9-96b6-0a13e68baeb7

# With Dependency Inversion Principle(S.O.L.I.D):
Link2: https://ide.geeksforgeeks.org/online-java-compiler/94b53137-466a-4a08-92fb-5d76c9d5d06a
As you can see the parent is dependent on the Interface ( Absatraction ) and the childs are implementing it and we can add many child without modifying the parent class. 

*Daemon threads are useful for background supporting tasks such as garbage collection, releasing memory of unused objects and removing unwanted entries from the cache.

*Basic inbuild Operations: Queue-> add(), poll(), peek(); Stack-> push(),pop(); LinkedList-> add(), pop();
*List of Inbuild functional Interface: Comparator, Comparable, Runnable, Callable.
* Avoid Duplicates of an Employee obj inside the Set: Link: https://ide.geeksforgeeks.org/499327b7-ddf0-4d99-a379-2ca5628a80f4
* ForEach vs ForEachOrder: forEach doesn't guarantee the order of processing, while forEachOrdered guarantees the order of processing.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~## Stream API Coding Questions ##~~~~~~~~~~~~~~~~~~~~~~~~~~
*GroupingBy in Java8: https://codingnconcepts.com/java/streams-with-map-java-8/#using-collectorsgroupingby
* Department who is provinding a heighest salary to their Employee. Link:https://ide.geeksforgeeks.org/online-java-compiler/021ade53-f4a5-4452-8aee-41508957ca35
*Return the list of students which are having the same "Course1". 
List<String> lstStr= map.entrySet().stream().filter(x->x.getValue().equals("Course1")).map(Map.Entry::getKey).collect(Collectors.toList());

*Name of Employee whose salary is >100;
Code: List<String> lstName = lst.stream().filter(x->x.getSalary()>100).map(y->y.getName()).collect(Collectors.toList());

*Get the list of Character who is repeating itself in. Link:https://ide.geeksforgeeks.org/online-java-compiler/0066041d-68b9-479f-8f26-ee45ece5fdd9

*Sum of the age of Employee: https://ide.geeksforgeeks.org/online-java-compiler/10bc99dc-a038-4c7a-ae01-a11efdd7ca72 

*Find the Occurence of each char Link: https://ide.geeksforgeeks.org/online-java-compiler/43ac8340-6df0-4359-b14f-0dd39dac4558
*Print char whose occuence is >1 && ==1 Link: https://ide.geeksforgeeks.org/online-java-compiler/2f48b966-3154-4ffa-9787-8d11791852b2
*String ans = "HELLO";
Arrays.stream(ans).collect(Collectors.groupingBy(Function.indentity(),LinkedHashMap::new,Collectors.counting()))
			   .entrySet().stream().filter(x->x.getValue()>1).findFirst().get().getKey(); 
// First repeating Character , if x.getValue()== 1 it will return first Non repeating.

## Predicate(): test(), Consumer(): accept(), function(): apply(), Supplier(): get(); ##
** How to generate a WAR(Web Archive) File from a Maven: JAr(Java Archeive)

Create a Global Exception Class:
*@ExceptionHandler(ExceptionName.class) is a method level annotation which is use to handle a particular exception.
*@ControllerAdvice annotation is use to handle the Exceptions globally , it is a class level annotation.
*ResponsStatus
*Thread Scheduler: It is use to assign CPU time to the thead. The more waiting thread will get more priority. 
* Start()->Runnable(Waiting for CPU)->Running(Got CPU)-(Waiting,Blocked,Sleep)->Terminated.
*Wait & notify() example Link: https://ide.geeksforgeeks.org/online-java-compiler/de8b0934-521e-4e56-9f6c-9b8100dcc709
*ThreadObj.setDeamon(true); //It will basically set any thread as a deamon.
..................................................# Design Pattern #...............................................
*Singleton Design Pattern: When a user want to share a single object btw the resources then it can use it, it produces a single object at a time. Application use: Multithreading, Database.
*ProtoType Design Pattern: It suggest to make the copy of an existing object which is already initialized. Idea is to reduce the cost of crating object, it can be use where the object creation is costly or complex. E.g:
.................................................................................................................
*How to avoid the memory Leak: When ever the memory is filled with unused resources which are unable to clean by GC.
Impact: It reduce the system performace.
1>Avoid the Static variables which remain live till the end of program.
2>Avoid unnecessary use of reference Object.
3>Always close the connection,Statements using finally block. 
4>Avoid String concatination, use StringBuilder.
Link:https://www.javatpoint.com/memory-leak-in-java

@ControllerAdvice
public class GlobalException 
{
	@ExceptionHandler(ExceptionName.class)
	public ResponsEntity<ErrorDetail> EmailException(ExceptionName expObj)
	{
		ErrorDetail err= new ErrorDetail(x1,expObj.getMessage(),x3);
		return new ResponsEntity<>(err,Http.Satus.NOT_FOUND);
	}
	//
	@ExceptionHandler(ExceptionName2.class)
	public ResponsEntity<ErrorDetails> generalException(Exception exp,WebRequest webRequest)
	{
		return new ResponsEntity<>(,HttpStatus.InteralServerError);
	}
}

e.g:
~~~~~~~~~~~~~~~
@GetMapping("/get/{id}")
public ResponseEntity<User> getUser(@PathVariable Long id) {
    User user = userRepository.findById(id)
            .orElseThrow(()-> new ResourceNotFoundException("User not found with id: " + id));
    return ResponseEntity.ok(user);
}
~~~~~~~~~~~~~~
throw new CustomExceptionClassName(Arguments);
It will automatically route the correct Exception Handler based on the CustomExceptionClassName, bcz @ExceptionHandler(CustomExceptionClassName.class) takes the custom exception class name as argument.  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*~~~~~# MongoDb Custom Query #~~~~~~~~~~~~~
Link:https://javatechonline.com/spring-boot-mongodb-query-examples/#:~:text=We%20can%20use%20the%20%40Query,instead%20of%20a%20JPA%20query.

*~~~~~~# JPA Repository Custom Query #~~~~~~~~~~~~
Link:https://www.javaguides.net/2018/11/spring-data-jpa-creating-database-queries-using-query-annotation.html

* Tutorial link:https://www.javaguides.net/p/spring-data-jpa-tutorial.html
*War Plugin Configuration:<plugin>
						  <groupId>org.apache.maven.plugins</groupId>
						  <artifactId>maven-war-plugin</artifactId>
						  </plugin>
*Basic Command of linux used in project:
#"nohup java jar-jarName.jar &"// It will run the jar even after terminal is closed.
#ps -ef | grep jarName.jar //To check the running status of a jar.

*SDLC: Plannig-> Design-> Build/Code-> Test-> Maintain/Review-> Deployment.
*Agile methedology is the latest one, it break the requirment in the chunks(iteration) and assign it to team members,
client can change or modify its requiment. Daily scrums call helps to track the progress & bugs inside the application.e.g is YouTube,FaceBook .

Q>: Remove the special Character from the "$USH!L". Link:

*Remove Embedded TomCatServer from Spring Boot application: 
<exclusions>
      <exclusion>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-tomcat</artifactId>
     </exclusion>
</exclusions> 

*String str="abc";
str=str.append("de"); Comment: The "abc" value will be remain in the constant pool but the str will point to the appended value,when ever a string is assign "abc" as value then the object will not create in the Constant pool it will point to the previous stored value; So immutability save the memory.

**ps -ef | grep jarName.jar // Use to check the jar status in linux server.
*$ nohup(NO HANG-UP) java -jar example.jar & //It  will run the jar untill the terminal is closed.

#AGILE Methodology: Planning->Design->Build(Coding)->Test->Maintain(Review)-> Deploy.

*How to handle the two DataBase in same application:






